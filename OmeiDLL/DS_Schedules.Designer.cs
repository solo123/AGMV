//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace com.Omei.DLL {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DS_Schedules")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DS_Schedules : global::System.Data.DataSet {
        
        private TourScheduleListDataTable tableTourScheduleList;
        
        private ScheduleBriefTblDataTable tableScheduleBriefTbl;
        
        private SchedulesSearchDataTable tableSchedulesSearch;
        
        private ScheduleBaseInfoDataTable tableScheduleBaseInfo;
        
        private TourScheduleReportDataTable tableTourScheduleReport;
        
        private FreeSchedulesDataTable tableFreeSchedules;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DS_Schedules() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DS_Schedules(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TourScheduleList"] != null)) {
                    base.Tables.Add(new TourScheduleListDataTable(ds.Tables["TourScheduleList"]));
                }
                if ((ds.Tables["ScheduleBriefTbl"] != null)) {
                    base.Tables.Add(new ScheduleBriefTblDataTable(ds.Tables["ScheduleBriefTbl"]));
                }
                if ((ds.Tables["SchedulesSearch"] != null)) {
                    base.Tables.Add(new SchedulesSearchDataTable(ds.Tables["SchedulesSearch"]));
                }
                if ((ds.Tables["ScheduleBaseInfo"] != null)) {
                    base.Tables.Add(new ScheduleBaseInfoDataTable(ds.Tables["ScheduleBaseInfo"]));
                }
                if ((ds.Tables["TourScheduleReport"] != null)) {
                    base.Tables.Add(new TourScheduleReportDataTable(ds.Tables["TourScheduleReport"]));
                }
                if ((ds.Tables["FreeSchedules"] != null)) {
                    base.Tables.Add(new FreeSchedulesDataTable(ds.Tables["FreeSchedules"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TourScheduleListDataTable TourScheduleList {
            get {
                return this.tableTourScheduleList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScheduleBriefTblDataTable ScheduleBriefTbl {
            get {
                return this.tableScheduleBriefTbl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchedulesSearchDataTable SchedulesSearch {
            get {
                return this.tableSchedulesSearch;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScheduleBaseInfoDataTable ScheduleBaseInfo {
            get {
                return this.tableScheduleBaseInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TourScheduleReportDataTable TourScheduleReport {
            get {
                return this.tableTourScheduleReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FreeSchedulesDataTable FreeSchedules {
            get {
                return this.tableFreeSchedules;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DS_Schedules cln = ((DS_Schedules)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TourScheduleList"] != null)) {
                    base.Tables.Add(new TourScheduleListDataTable(ds.Tables["TourScheduleList"]));
                }
                if ((ds.Tables["ScheduleBriefTbl"] != null)) {
                    base.Tables.Add(new ScheduleBriefTblDataTable(ds.Tables["ScheduleBriefTbl"]));
                }
                if ((ds.Tables["SchedulesSearch"] != null)) {
                    base.Tables.Add(new SchedulesSearchDataTable(ds.Tables["SchedulesSearch"]));
                }
                if ((ds.Tables["ScheduleBaseInfo"] != null)) {
                    base.Tables.Add(new ScheduleBaseInfoDataTable(ds.Tables["ScheduleBaseInfo"]));
                }
                if ((ds.Tables["TourScheduleReport"] != null)) {
                    base.Tables.Add(new TourScheduleReportDataTable(ds.Tables["TourScheduleReport"]));
                }
                if ((ds.Tables["FreeSchedules"] != null)) {
                    base.Tables.Add(new FreeSchedulesDataTable(ds.Tables["FreeSchedules"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTourScheduleList = ((TourScheduleListDataTable)(base.Tables["TourScheduleList"]));
            if ((initTable == true)) {
                if ((this.tableTourScheduleList != null)) {
                    this.tableTourScheduleList.InitVars();
                }
            }
            this.tableScheduleBriefTbl = ((ScheduleBriefTblDataTable)(base.Tables["ScheduleBriefTbl"]));
            if ((initTable == true)) {
                if ((this.tableScheduleBriefTbl != null)) {
                    this.tableScheduleBriefTbl.InitVars();
                }
            }
            this.tableSchedulesSearch = ((SchedulesSearchDataTable)(base.Tables["SchedulesSearch"]));
            if ((initTable == true)) {
                if ((this.tableSchedulesSearch != null)) {
                    this.tableSchedulesSearch.InitVars();
                }
            }
            this.tableScheduleBaseInfo = ((ScheduleBaseInfoDataTable)(base.Tables["ScheduleBaseInfo"]));
            if ((initTable == true)) {
                if ((this.tableScheduleBaseInfo != null)) {
                    this.tableScheduleBaseInfo.InitVars();
                }
            }
            this.tableTourScheduleReport = ((TourScheduleReportDataTable)(base.Tables["TourScheduleReport"]));
            if ((initTable == true)) {
                if ((this.tableTourScheduleReport != null)) {
                    this.tableTourScheduleReport.InitVars();
                }
            }
            this.tableFreeSchedules = ((FreeSchedulesDataTable)(base.Tables["FreeSchedules"]));
            if ((initTable == true)) {
                if ((this.tableFreeSchedules != null)) {
                    this.tableFreeSchedules.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DS_Schedules";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DS_Schedules.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTourScheduleList = new TourScheduleListDataTable();
            base.Tables.Add(this.tableTourScheduleList);
            this.tableScheduleBriefTbl = new ScheduleBriefTblDataTable();
            base.Tables.Add(this.tableScheduleBriefTbl);
            this.tableSchedulesSearch = new SchedulesSearchDataTable();
            base.Tables.Add(this.tableSchedulesSearch);
            this.tableScheduleBaseInfo = new ScheduleBaseInfoDataTable();
            base.Tables.Add(this.tableScheduleBaseInfo);
            this.tableTourScheduleReport = new TourScheduleReportDataTable();
            base.Tables.Add(this.tableTourScheduleReport);
            this.tableFreeSchedules = new FreeSchedulesDataTable();
            base.Tables.Add(this.tableFreeSchedules);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTourScheduleList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScheduleBriefTbl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchedulesSearch() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScheduleBaseInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTourScheduleReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFreeSchedules() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DS_Schedules ds = new DS_Schedules();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TourScheduleListRowChangeEventHandler(object sender, TourScheduleListRowChangeEvent e);
        
        public delegate void ScheduleBriefTblRowChangeEventHandler(object sender, ScheduleBriefTblRowChangeEvent e);
        
        public delegate void SchedulesSearchRowChangeEventHandler(object sender, SchedulesSearchRowChangeEvent e);
        
        public delegate void ScheduleBaseInfoRowChangeEventHandler(object sender, ScheduleBaseInfoRowChangeEvent e);
        
        public delegate void TourScheduleReportRowChangeEventHandler(object sender, TourScheduleReportRowChangeEvent e);
        
        public delegate void FreeSchedulesRowChangeEventHandler(object sender, FreeSchedulesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TourScheduleListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnscheduleId;
            
            private global::System.Data.DataColumn columnstartDate;
            
            private global::System.Data.DataColumn columnendDate;
            
            private global::System.Data.DataColumn columncreateMode;
            
            private global::System.Data.DataColumn columnmaxSeats;
            
            private global::System.Data.DataColumn columnbookCustomers;
            
            private global::System.Data.DataColumn columnpriceAdult;
            
            private global::System.Data.DataColumn columnpriceChild;
            
            private global::System.Data.DataColumn columntourGuide;
            
            private global::System.Data.DataColumn columnDriver;
            
            private global::System.Data.DataColumn columnstatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleListDataTable() {
                this.TableName = "TourScheduleList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TourScheduleListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TourScheduleListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scheduleIdColumn {
                get {
                    return this.columnscheduleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startDateColumn {
                get {
                    return this.columnstartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn endDateColumn {
                get {
                    return this.columnendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn createModeColumn {
                get {
                    return this.columncreateMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maxSeatsColumn {
                get {
                    return this.columnmaxSeats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bookCustomersColumn {
                get {
                    return this.columnbookCustomers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceAdultColumn {
                get {
                    return this.columnpriceAdult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceChildColumn {
                get {
                    return this.columnpriceChild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourGuideColumn {
                get {
                    return this.columntourGuide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriverColumn {
                get {
                    return this.columnDriver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleListRow this[int index] {
                get {
                    return ((TourScheduleListRow)(this.Rows[index]));
                }
            }
            
            public event TourScheduleListRowChangeEventHandler TourScheduleListRowChanging;
            
            public event TourScheduleListRowChangeEventHandler TourScheduleListRowChanged;
            
            public event TourScheduleListRowChangeEventHandler TourScheduleListRowDeleting;
            
            public event TourScheduleListRowChangeEventHandler TourScheduleListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTourScheduleListRow(TourScheduleListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleListRow AddTourScheduleListRow(System.DateTime startDate, System.DateTime endDate, byte createMode, int maxSeats, int bookCustomers, decimal priceAdult, decimal priceChild, string tourGuide, string Driver, byte status) {
                TourScheduleListRow rowTourScheduleListRow = ((TourScheduleListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        startDate,
                        endDate,
                        createMode,
                        maxSeats,
                        bookCustomers,
                        priceAdult,
                        priceChild,
                        tourGuide,
                        Driver,
                        status};
                rowTourScheduleListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTourScheduleListRow);
                return rowTourScheduleListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleListRow FindByscheduleId(int scheduleId) {
                return ((TourScheduleListRow)(this.Rows.Find(new object[] {
                            scheduleId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TourScheduleListDataTable cln = ((TourScheduleListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TourScheduleListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscheduleId = base.Columns["scheduleId"];
                this.columnstartDate = base.Columns["startDate"];
                this.columnendDate = base.Columns["endDate"];
                this.columncreateMode = base.Columns["createMode"];
                this.columnmaxSeats = base.Columns["maxSeats"];
                this.columnbookCustomers = base.Columns["bookCustomers"];
                this.columnpriceAdult = base.Columns["priceAdult"];
                this.columnpriceChild = base.Columns["priceChild"];
                this.columntourGuide = base.Columns["tourGuide"];
                this.columnDriver = base.Columns["Driver"];
                this.columnstatus = base.Columns["status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscheduleId = new global::System.Data.DataColumn("scheduleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscheduleId);
                this.columnstartDate = new global::System.Data.DataColumn("startDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartDate);
                this.columnendDate = new global::System.Data.DataColumn("endDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnendDate);
                this.columncreateMode = new global::System.Data.DataColumn("createMode", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreateMode);
                this.columnmaxSeats = new global::System.Data.DataColumn("maxSeats", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxSeats);
                this.columnbookCustomers = new global::System.Data.DataColumn("bookCustomers", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbookCustomers);
                this.columnpriceAdult = new global::System.Data.DataColumn("priceAdult", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceAdult);
                this.columnpriceChild = new global::System.Data.DataColumn("priceChild", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceChild);
                this.columntourGuide = new global::System.Data.DataColumn("tourGuide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourGuide);
                this.columnDriver = new global::System.Data.DataColumn("Driver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriver);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscheduleId}, true));
                this.columnscheduleId.AutoIncrement = true;
                this.columnscheduleId.AllowDBNull = false;
                this.columnscheduleId.ReadOnly = true;
                this.columnscheduleId.Unique = true;
                this.columnstartDate.AllowDBNull = false;
                this.columnendDate.AllowDBNull = false;
                this.columncreateMode.AllowDBNull = false;
                this.columnmaxSeats.AllowDBNull = false;
                this.columnbookCustomers.AllowDBNull = false;
                this.columntourGuide.ReadOnly = true;
                this.columntourGuide.MaxLength = 101;
                this.columnDriver.ReadOnly = true;
                this.columnDriver.MaxLength = 101;
                this.columnstatus.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleListRow NewTourScheduleListRow() {
                return ((TourScheduleListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TourScheduleListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TourScheduleListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TourScheduleListRowChanged != null)) {
                    this.TourScheduleListRowChanged(this, new TourScheduleListRowChangeEvent(((TourScheduleListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TourScheduleListRowChanging != null)) {
                    this.TourScheduleListRowChanging(this, new TourScheduleListRowChangeEvent(((TourScheduleListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TourScheduleListRowDeleted != null)) {
                    this.TourScheduleListRowDeleted(this, new TourScheduleListRowChangeEvent(((TourScheduleListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TourScheduleListRowDeleting != null)) {
                    this.TourScheduleListRowDeleting(this, new TourScheduleListRowChangeEvent(((TourScheduleListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTourScheduleListRow(TourScheduleListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS_Schedules ds = new DS_Schedules();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TourScheduleListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScheduleBriefTblDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnscheduleId;
            
            private global::System.Data.DataColumn columntourId;
            
            private global::System.Data.DataColumn columnstartDate;
            
            private global::System.Data.DataColumn columnendDate;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columncreateMode;
            
            private global::System.Data.DataColumn columnbookCustomers;
            
            private global::System.Data.DataColumn columnactualCustomers;
            
            private global::System.Data.DataColumn columnpriceAdult;
            
            private global::System.Data.DataColumn columnpriceChild;
            
            private global::System.Data.DataColumn columnTourName;
            
            private global::System.Data.DataColumn columnTourName_cn;
            
            private global::System.Data.DataColumn columnTourType;
            
            private global::System.Data.DataColumn columntourStatus;
            
            private global::System.Data.DataColumn columnsubTitle;
            
            private global::System.Data.DataColumn columnTourDay;
            
            private global::System.Data.DataColumn columnactualRooms;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBriefTblDataTable() {
                this.TableName = "ScheduleBriefTbl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduleBriefTblDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScheduleBriefTblDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scheduleIdColumn {
                get {
                    return this.columnscheduleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourIdColumn {
                get {
                    return this.columntourId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startDateColumn {
                get {
                    return this.columnstartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn endDateColumn {
                get {
                    return this.columnendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn createModeColumn {
                get {
                    return this.columncreateMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bookCustomersColumn {
                get {
                    return this.columnbookCustomers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actualCustomersColumn {
                get {
                    return this.columnactualCustomers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceAdultColumn {
                get {
                    return this.columnpriceAdult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceChildColumn {
                get {
                    return this.columnpriceChild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TourNameColumn {
                get {
                    return this.columnTourName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TourName_cnColumn {
                get {
                    return this.columnTourName_cn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TourTypeColumn {
                get {
                    return this.columnTourType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourStatusColumn {
                get {
                    return this.columntourStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subTitleColumn {
                get {
                    return this.columnsubTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TourDayColumn {
                get {
                    return this.columnTourDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actualRoomsColumn {
                get {
                    return this.columnactualRooms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBriefTblRow this[int index] {
                get {
                    return ((ScheduleBriefTblRow)(this.Rows[index]));
                }
            }
            
            public event ScheduleBriefTblRowChangeEventHandler ScheduleBriefTblRowChanging;
            
            public event ScheduleBriefTblRowChangeEventHandler ScheduleBriefTblRowChanged;
            
            public event ScheduleBriefTblRowChangeEventHandler ScheduleBriefTblRowDeleting;
            
            public event ScheduleBriefTblRowChangeEventHandler ScheduleBriefTblRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScheduleBriefTblRow(ScheduleBriefTblRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBriefTblRow AddScheduleBriefTblRow(
                        int tourId, 
                        System.DateTime startDate, 
                        System.DateTime endDate, 
                        byte status, 
                        byte createMode, 
                        int bookCustomers, 
                        int actualCustomers, 
                        decimal priceAdult, 
                        decimal priceChild, 
                        string TourName, 
                        string TourName_cn, 
                        byte TourType, 
                        byte tourStatus, 
                        string subTitle, 
                        byte TourDay, 
                        decimal actualRooms) {
                ScheduleBriefTblRow rowScheduleBriefTblRow = ((ScheduleBriefTblRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        tourId,
                        startDate,
                        endDate,
                        status,
                        createMode,
                        bookCustomers,
                        actualCustomers,
                        priceAdult,
                        priceChild,
                        TourName,
                        TourName_cn,
                        TourType,
                        tourStatus,
                        subTitle,
                        TourDay,
                        actualRooms};
                rowScheduleBriefTblRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScheduleBriefTblRow);
                return rowScheduleBriefTblRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBriefTblRow FindByscheduleId(int scheduleId) {
                return ((ScheduleBriefTblRow)(this.Rows.Find(new object[] {
                            scheduleId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScheduleBriefTblDataTable cln = ((ScheduleBriefTblDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScheduleBriefTblDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscheduleId = base.Columns["scheduleId"];
                this.columntourId = base.Columns["tourId"];
                this.columnstartDate = base.Columns["startDate"];
                this.columnendDate = base.Columns["endDate"];
                this.columnstatus = base.Columns["status"];
                this.columncreateMode = base.Columns["createMode"];
                this.columnbookCustomers = base.Columns["bookCustomers"];
                this.columnactualCustomers = base.Columns["actualCustomers"];
                this.columnpriceAdult = base.Columns["priceAdult"];
                this.columnpriceChild = base.Columns["priceChild"];
                this.columnTourName = base.Columns["TourName"];
                this.columnTourName_cn = base.Columns["TourName_cn"];
                this.columnTourType = base.Columns["TourType"];
                this.columntourStatus = base.Columns["tourStatus"];
                this.columnsubTitle = base.Columns["subTitle"];
                this.columnTourDay = base.Columns["TourDay"];
                this.columnactualRooms = base.Columns["actualRooms"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscheduleId = new global::System.Data.DataColumn("scheduleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscheduleId);
                this.columntourId = new global::System.Data.DataColumn("tourId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourId);
                this.columnstartDate = new global::System.Data.DataColumn("startDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartDate);
                this.columnendDate = new global::System.Data.DataColumn("endDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnendDate);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columncreateMode = new global::System.Data.DataColumn("createMode", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreateMode);
                this.columnbookCustomers = new global::System.Data.DataColumn("bookCustomers", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbookCustomers);
                this.columnactualCustomers = new global::System.Data.DataColumn("actualCustomers", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactualCustomers);
                this.columnpriceAdult = new global::System.Data.DataColumn("priceAdult", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceAdult);
                this.columnpriceChild = new global::System.Data.DataColumn("priceChild", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceChild);
                this.columnTourName = new global::System.Data.DataColumn("TourName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTourName);
                this.columnTourName_cn = new global::System.Data.DataColumn("TourName_cn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTourName_cn);
                this.columnTourType = new global::System.Data.DataColumn("TourType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTourType);
                this.columntourStatus = new global::System.Data.DataColumn("tourStatus", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourStatus);
                this.columnsubTitle = new global::System.Data.DataColumn("subTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubTitle);
                this.columnTourDay = new global::System.Data.DataColumn("TourDay", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTourDay);
                this.columnactualRooms = new global::System.Data.DataColumn("actualRooms", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactualRooms);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscheduleId}, true));
                this.columnscheduleId.AutoIncrement = true;
                this.columnscheduleId.AllowDBNull = false;
                this.columnscheduleId.ReadOnly = true;
                this.columnscheduleId.Unique = true;
                this.columntourId.AllowDBNull = false;
                this.columnstartDate.AllowDBNull = false;
                this.columnendDate.AllowDBNull = false;
                this.columnstatus.AllowDBNull = false;
                this.columncreateMode.AllowDBNull = false;
                this.columnbookCustomers.AllowDBNull = false;
                this.columnactualCustomers.AllowDBNull = false;
                this.columnpriceAdult.AllowDBNull = false;
                this.columnpriceChild.AllowDBNull = false;
                this.columnTourName.AllowDBNull = false;
                this.columnTourName.MaxLength = 200;
                this.columnTourName_cn.AllowDBNull = false;
                this.columnTourName_cn.MaxLength = 200;
                this.columnTourType.AllowDBNull = false;
                this.columntourStatus.AllowDBNull = false;
                this.columnsubTitle.AllowDBNull = false;
                this.columnsubTitle.MaxLength = 200;
                this.columnTourDay.AllowDBNull = false;
                this.columnactualRooms.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBriefTblRow NewScheduleBriefTblRow() {
                return ((ScheduleBriefTblRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScheduleBriefTblRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScheduleBriefTblRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScheduleBriefTblRowChanged != null)) {
                    this.ScheduleBriefTblRowChanged(this, new ScheduleBriefTblRowChangeEvent(((ScheduleBriefTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScheduleBriefTblRowChanging != null)) {
                    this.ScheduleBriefTblRowChanging(this, new ScheduleBriefTblRowChangeEvent(((ScheduleBriefTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScheduleBriefTblRowDeleted != null)) {
                    this.ScheduleBriefTblRowDeleted(this, new ScheduleBriefTblRowChangeEvent(((ScheduleBriefTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScheduleBriefTblRowDeleting != null)) {
                    this.ScheduleBriefTblRowDeleting(this, new ScheduleBriefTblRowChangeEvent(((ScheduleBriefTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScheduleBriefTblRow(ScheduleBriefTblRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS_Schedules ds = new DS_Schedules();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScheduleBriefTblDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SchedulesSearchDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnscheduleId;
            
            private global::System.Data.DataColumn columnstartDate;
            
            private global::System.Data.DataColumn columnmaxSeats;
            
            private global::System.Data.DataColumn columnbookCustomers;
            
            private global::System.Data.DataColumn columntourId;
            
            private global::System.Data.DataColumn columnactualCustomers;
            
            private global::System.Data.DataColumn columnTourName_cn;
            
            private global::System.Data.DataColumn columndriver;
            
            private global::System.Data.DataColumn columntourGuide;
            
            private global::System.Data.DataColumn columnTourName;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnsubTitle;
            
            private global::System.Data.DataColumn columntourDay;
            
            private global::System.Data.DataColumn columnpriceAdult;
            
            private global::System.Data.DataColumn columnpriceChild;
            
            private global::System.Data.DataColumn columnhasSeatTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchedulesSearchDataTable() {
                this.TableName = "SchedulesSearch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchedulesSearchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SchedulesSearchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scheduleIdColumn {
                get {
                    return this.columnscheduleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startDateColumn {
                get {
                    return this.columnstartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maxSeatsColumn {
                get {
                    return this.columnmaxSeats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bookCustomersColumn {
                get {
                    return this.columnbookCustomers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourIdColumn {
                get {
                    return this.columntourId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actualCustomersColumn {
                get {
                    return this.columnactualCustomers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TourName_cnColumn {
                get {
                    return this.columnTourName_cn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn driverColumn {
                get {
                    return this.columndriver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourGuideColumn {
                get {
                    return this.columntourGuide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TourNameColumn {
                get {
                    return this.columnTourName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subTitleColumn {
                get {
                    return this.columnsubTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourDayColumn {
                get {
                    return this.columntourDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceAdultColumn {
                get {
                    return this.columnpriceAdult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceChildColumn {
                get {
                    return this.columnpriceChild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hasSeatTableColumn {
                get {
                    return this.columnhasSeatTable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchedulesSearchRow this[int index] {
                get {
                    return ((SchedulesSearchRow)(this.Rows[index]));
                }
            }
            
            public event SchedulesSearchRowChangeEventHandler SchedulesSearchRowChanging;
            
            public event SchedulesSearchRowChangeEventHandler SchedulesSearchRowChanged;
            
            public event SchedulesSearchRowChangeEventHandler SchedulesSearchRowDeleting;
            
            public event SchedulesSearchRowChangeEventHandler SchedulesSearchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSchedulesSearchRow(SchedulesSearchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchedulesSearchRow AddSchedulesSearchRow(System.DateTime startDate, int maxSeats, int bookCustomers, int tourId, int actualCustomers, string TourName_cn, string driver, string tourGuide, string TourName, byte status, string subTitle, byte tourDay, decimal priceAdult, decimal priceChild, bool hasSeatTable) {
                SchedulesSearchRow rowSchedulesSearchRow = ((SchedulesSearchRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        startDate,
                        maxSeats,
                        bookCustomers,
                        tourId,
                        actualCustomers,
                        TourName_cn,
                        driver,
                        tourGuide,
                        TourName,
                        status,
                        subTitle,
                        tourDay,
                        priceAdult,
                        priceChild,
                        hasSeatTable};
                rowSchedulesSearchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSchedulesSearchRow);
                return rowSchedulesSearchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchedulesSearchRow FindByscheduleId(int scheduleId) {
                return ((SchedulesSearchRow)(this.Rows.Find(new object[] {
                            scheduleId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SchedulesSearchDataTable cln = ((SchedulesSearchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SchedulesSearchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscheduleId = base.Columns["scheduleId"];
                this.columnstartDate = base.Columns["startDate"];
                this.columnmaxSeats = base.Columns["maxSeats"];
                this.columnbookCustomers = base.Columns["bookCustomers"];
                this.columntourId = base.Columns["tourId"];
                this.columnactualCustomers = base.Columns["actualCustomers"];
                this.columnTourName_cn = base.Columns["TourName_cn"];
                this.columndriver = base.Columns["driver"];
                this.columntourGuide = base.Columns["tourGuide"];
                this.columnTourName = base.Columns["TourName"];
                this.columnstatus = base.Columns["status"];
                this.columnsubTitle = base.Columns["subTitle"];
                this.columntourDay = base.Columns["tourDay"];
                this.columnpriceAdult = base.Columns["priceAdult"];
                this.columnpriceChild = base.Columns["priceChild"];
                this.columnhasSeatTable = base.Columns["hasSeatTable"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscheduleId = new global::System.Data.DataColumn("scheduleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscheduleId);
                this.columnstartDate = new global::System.Data.DataColumn("startDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartDate);
                this.columnmaxSeats = new global::System.Data.DataColumn("maxSeats", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxSeats);
                this.columnbookCustomers = new global::System.Data.DataColumn("bookCustomers", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbookCustomers);
                this.columntourId = new global::System.Data.DataColumn("tourId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourId);
                this.columnactualCustomers = new global::System.Data.DataColumn("actualCustomers", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactualCustomers);
                this.columnTourName_cn = new global::System.Data.DataColumn("TourName_cn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTourName_cn);
                this.columndriver = new global::System.Data.DataColumn("driver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndriver);
                this.columntourGuide = new global::System.Data.DataColumn("tourGuide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourGuide);
                this.columnTourName = new global::System.Data.DataColumn("TourName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTourName);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnsubTitle = new global::System.Data.DataColumn("subTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubTitle);
                this.columntourDay = new global::System.Data.DataColumn("tourDay", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourDay);
                this.columnpriceAdult = new global::System.Data.DataColumn("priceAdult", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceAdult);
                this.columnpriceChild = new global::System.Data.DataColumn("priceChild", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceChild);
                this.columnhasSeatTable = new global::System.Data.DataColumn("hasSeatTable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhasSeatTable);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscheduleId}, true));
                this.columnscheduleId.AutoIncrement = true;
                this.columnscheduleId.AllowDBNull = false;
                this.columnscheduleId.ReadOnly = true;
                this.columnscheduleId.Unique = true;
                this.columnstartDate.AllowDBNull = false;
                this.columnmaxSeats.AllowDBNull = false;
                this.columnbookCustomers.AllowDBNull = false;
                this.columntourId.AllowDBNull = false;
                this.columnactualCustomers.AllowDBNull = false;
                this.columnTourName_cn.AllowDBNull = false;
                this.columnTourName_cn.MaxLength = 200;
                this.columndriver.ReadOnly = true;
                this.columndriver.MaxLength = 101;
                this.columntourGuide.ReadOnly = true;
                this.columntourGuide.MaxLength = 101;
                this.columnTourName.AllowDBNull = false;
                this.columnTourName.MaxLength = 200;
                this.columnstatus.AllowDBNull = false;
                this.columnsubTitle.AllowDBNull = false;
                this.columnsubTitle.MaxLength = 200;
                this.columntourDay.AllowDBNull = false;
                this.columnpriceAdult.AllowDBNull = false;
                this.columnpriceChild.AllowDBNull = false;
                this.columnhasSeatTable.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchedulesSearchRow NewSchedulesSearchRow() {
                return ((SchedulesSearchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SchedulesSearchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SchedulesSearchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchedulesSearchRowChanged != null)) {
                    this.SchedulesSearchRowChanged(this, new SchedulesSearchRowChangeEvent(((SchedulesSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchedulesSearchRowChanging != null)) {
                    this.SchedulesSearchRowChanging(this, new SchedulesSearchRowChangeEvent(((SchedulesSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchedulesSearchRowDeleted != null)) {
                    this.SchedulesSearchRowDeleted(this, new SchedulesSearchRowChangeEvent(((SchedulesSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchedulesSearchRowDeleting != null)) {
                    this.SchedulesSearchRowDeleting(this, new SchedulesSearchRowChangeEvent(((SchedulesSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSchedulesSearchRow(SchedulesSearchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS_Schedules ds = new DS_Schedules();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SchedulesSearchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScheduleBaseInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnscheduleId;
            
            private global::System.Data.DataColumn columnvehicleId;
            
            private global::System.Data.DataColumn columnmaxSeats;
            
            private global::System.Data.DataColumn columndriverId;
            
            private global::System.Data.DataColumn columndriverAssistanceId;
            
            private global::System.Data.DataColumn columntourGuideId;
            
            private global::System.Data.DataColumn columntourGuideAssistanceId;
            
            private global::System.Data.DataColumn columnvehicleName;
            
            private global::System.Data.DataColumn columncustomerSeatNum;
            
            private global::System.Data.DataColumn columndriverName;
            
            private global::System.Data.DataColumn columndriverAssName;
            
            private global::System.Data.DataColumn columntourGuideName;
            
            private global::System.Data.DataColumn columntourGuideAssName;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnsubTitle;
            
            private global::System.Data.DataColumn columnstartDate;
            
            private global::System.Data.DataColumn columnendDate;
            
            private global::System.Data.DataColumn columntourId;
            
            private global::System.Data.DataColumn columntourDay;
            
            private global::System.Data.DataColumn columnmaxWebSeats;
            
            private global::System.Data.DataColumn columnpriceAdult;
            
            private global::System.Data.DataColumn columnpriceChild;
            
            private global::System.Data.DataColumn columnhasSeatTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBaseInfoDataTable() {
                this.TableName = "ScheduleBaseInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduleBaseInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScheduleBaseInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scheduleIdColumn {
                get {
                    return this.columnscheduleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vehicleIdColumn {
                get {
                    return this.columnvehicleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maxSeatsColumn {
                get {
                    return this.columnmaxSeats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn driverIdColumn {
                get {
                    return this.columndriverId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn driverAssistanceIdColumn {
                get {
                    return this.columndriverAssistanceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourGuideIdColumn {
                get {
                    return this.columntourGuideId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourGuideAssistanceIdColumn {
                get {
                    return this.columntourGuideAssistanceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vehicleNameColumn {
                get {
                    return this.columnvehicleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn customerSeatNumColumn {
                get {
                    return this.columncustomerSeatNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn driverNameColumn {
                get {
                    return this.columndriverName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn driverAssNameColumn {
                get {
                    return this.columndriverAssName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourGuideNameColumn {
                get {
                    return this.columntourGuideName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourGuideAssNameColumn {
                get {
                    return this.columntourGuideAssName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subTitleColumn {
                get {
                    return this.columnsubTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startDateColumn {
                get {
                    return this.columnstartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn endDateColumn {
                get {
                    return this.columnendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourIdColumn {
                get {
                    return this.columntourId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourDayColumn {
                get {
                    return this.columntourDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maxWebSeatsColumn {
                get {
                    return this.columnmaxWebSeats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceAdultColumn {
                get {
                    return this.columnpriceAdult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceChildColumn {
                get {
                    return this.columnpriceChild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hasSeatTableColumn {
                get {
                    return this.columnhasSeatTable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBaseInfoRow this[int index] {
                get {
                    return ((ScheduleBaseInfoRow)(this.Rows[index]));
                }
            }
            
            public event ScheduleBaseInfoRowChangeEventHandler ScheduleBaseInfoRowChanging;
            
            public event ScheduleBaseInfoRowChangeEventHandler ScheduleBaseInfoRowChanged;
            
            public event ScheduleBaseInfoRowChangeEventHandler ScheduleBaseInfoRowDeleting;
            
            public event ScheduleBaseInfoRowChangeEventHandler ScheduleBaseInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScheduleBaseInfoRow(ScheduleBaseInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBaseInfoRow AddScheduleBaseInfoRow(
                        int vehicleId, 
                        int maxSeats, 
                        int driverId, 
                        int driverAssistanceId, 
                        int tourGuideId, 
                        int tourGuideAssistanceId, 
                        string vehicleName, 
                        int customerSeatNum, 
                        string driverName, 
                        string driverAssName, 
                        string tourGuideName, 
                        string tourGuideAssName, 
                        byte status, 
                        string subTitle, 
                        System.DateTime startDate, 
                        System.DateTime endDate, 
                        int tourId, 
                        byte tourDay, 
                        int maxWebSeats, 
                        decimal priceAdult, 
                        decimal priceChild, 
                        bool hasSeatTable) {
                ScheduleBaseInfoRow rowScheduleBaseInfoRow = ((ScheduleBaseInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        vehicleId,
                        maxSeats,
                        driverId,
                        driverAssistanceId,
                        tourGuideId,
                        tourGuideAssistanceId,
                        vehicleName,
                        customerSeatNum,
                        driverName,
                        driverAssName,
                        tourGuideName,
                        tourGuideAssName,
                        status,
                        subTitle,
                        startDate,
                        endDate,
                        tourId,
                        tourDay,
                        maxWebSeats,
                        priceAdult,
                        priceChild,
                        hasSeatTable};
                rowScheduleBaseInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScheduleBaseInfoRow);
                return rowScheduleBaseInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBaseInfoRow FindByscheduleId(int scheduleId) {
                return ((ScheduleBaseInfoRow)(this.Rows.Find(new object[] {
                            scheduleId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScheduleBaseInfoDataTable cln = ((ScheduleBaseInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScheduleBaseInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscheduleId = base.Columns["scheduleId"];
                this.columnvehicleId = base.Columns["vehicleId"];
                this.columnmaxSeats = base.Columns["maxSeats"];
                this.columndriverId = base.Columns["driverId"];
                this.columndriverAssistanceId = base.Columns["driverAssistanceId"];
                this.columntourGuideId = base.Columns["tourGuideId"];
                this.columntourGuideAssistanceId = base.Columns["tourGuideAssistanceId"];
                this.columnvehicleName = base.Columns["vehicleName"];
                this.columncustomerSeatNum = base.Columns["customerSeatNum"];
                this.columndriverName = base.Columns["driverName"];
                this.columndriverAssName = base.Columns["driverAssName"];
                this.columntourGuideName = base.Columns["tourGuideName"];
                this.columntourGuideAssName = base.Columns["tourGuideAssName"];
                this.columnstatus = base.Columns["status"];
                this.columnsubTitle = base.Columns["subTitle"];
                this.columnstartDate = base.Columns["startDate"];
                this.columnendDate = base.Columns["endDate"];
                this.columntourId = base.Columns["tourId"];
                this.columntourDay = base.Columns["tourDay"];
                this.columnmaxWebSeats = base.Columns["maxWebSeats"];
                this.columnpriceAdult = base.Columns["priceAdult"];
                this.columnpriceChild = base.Columns["priceChild"];
                this.columnhasSeatTable = base.Columns["hasSeatTable"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscheduleId = new global::System.Data.DataColumn("scheduleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscheduleId);
                this.columnvehicleId = new global::System.Data.DataColumn("vehicleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvehicleId);
                this.columnmaxSeats = new global::System.Data.DataColumn("maxSeats", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxSeats);
                this.columndriverId = new global::System.Data.DataColumn("driverId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndriverId);
                this.columndriverAssistanceId = new global::System.Data.DataColumn("driverAssistanceId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndriverAssistanceId);
                this.columntourGuideId = new global::System.Data.DataColumn("tourGuideId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourGuideId);
                this.columntourGuideAssistanceId = new global::System.Data.DataColumn("tourGuideAssistanceId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourGuideAssistanceId);
                this.columnvehicleName = new global::System.Data.DataColumn("vehicleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvehicleName);
                this.columncustomerSeatNum = new global::System.Data.DataColumn("customerSeatNum", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncustomerSeatNum);
                this.columndriverName = new global::System.Data.DataColumn("driverName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndriverName);
                this.columndriverAssName = new global::System.Data.DataColumn("driverAssName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndriverAssName);
                this.columntourGuideName = new global::System.Data.DataColumn("tourGuideName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourGuideName);
                this.columntourGuideAssName = new global::System.Data.DataColumn("tourGuideAssName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourGuideAssName);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnsubTitle = new global::System.Data.DataColumn("subTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubTitle);
                this.columnstartDate = new global::System.Data.DataColumn("startDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartDate);
                this.columnendDate = new global::System.Data.DataColumn("endDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnendDate);
                this.columntourId = new global::System.Data.DataColumn("tourId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourId);
                this.columntourDay = new global::System.Data.DataColumn("tourDay", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourDay);
                this.columnmaxWebSeats = new global::System.Data.DataColumn("maxWebSeats", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxWebSeats);
                this.columnpriceAdult = new global::System.Data.DataColumn("priceAdult", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceAdult);
                this.columnpriceChild = new global::System.Data.DataColumn("priceChild", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceChild);
                this.columnhasSeatTable = new global::System.Data.DataColumn("hasSeatTable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhasSeatTable);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscheduleId}, true));
                this.columnscheduleId.AutoIncrement = true;
                this.columnscheduleId.AllowDBNull = false;
                this.columnscheduleId.ReadOnly = true;
                this.columnscheduleId.Unique = true;
                this.columnvehicleId.AllowDBNull = false;
                this.columnmaxSeats.AllowDBNull = false;
                this.columndriverId.AllowDBNull = false;
                this.columndriverAssistanceId.AllowDBNull = false;
                this.columntourGuideId.AllowDBNull = false;
                this.columntourGuideAssistanceId.AllowDBNull = false;
                this.columnvehicleName.MaxLength = 100;
                this.columndriverName.ReadOnly = true;
                this.columndriverName.MaxLength = 101;
                this.columndriverAssName.ReadOnly = true;
                this.columndriverAssName.MaxLength = 101;
                this.columntourGuideName.ReadOnly = true;
                this.columntourGuideName.MaxLength = 101;
                this.columntourGuideAssName.ReadOnly = true;
                this.columntourGuideAssName.MaxLength = 101;
                this.columnstatus.AllowDBNull = false;
                this.columnsubTitle.AllowDBNull = false;
                this.columnsubTitle.MaxLength = 200;
                this.columnstartDate.AllowDBNull = false;
                this.columnendDate.AllowDBNull = false;
                this.columntourId.AllowDBNull = false;
                this.columnmaxWebSeats.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBaseInfoRow NewScheduleBaseInfoRow() {
                return ((ScheduleBaseInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScheduleBaseInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScheduleBaseInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScheduleBaseInfoRowChanged != null)) {
                    this.ScheduleBaseInfoRowChanged(this, new ScheduleBaseInfoRowChangeEvent(((ScheduleBaseInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScheduleBaseInfoRowChanging != null)) {
                    this.ScheduleBaseInfoRowChanging(this, new ScheduleBaseInfoRowChangeEvent(((ScheduleBaseInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScheduleBaseInfoRowDeleted != null)) {
                    this.ScheduleBaseInfoRowDeleted(this, new ScheduleBaseInfoRowChangeEvent(((ScheduleBaseInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScheduleBaseInfoRowDeleting != null)) {
                    this.ScheduleBaseInfoRowDeleting(this, new ScheduleBaseInfoRowChangeEvent(((ScheduleBaseInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScheduleBaseInfoRow(ScheduleBaseInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS_Schedules ds = new DS_Schedules();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScheduleBaseInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TourScheduleReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntourID;
            
            private global::System.Data.DataColumn columnscheduleCount;
            
            private global::System.Data.DataColumn columnbookCustomers;
            
            private global::System.Data.DataColumn columnactualCustomers;
            
            private global::System.Data.DataColumn columnactualRooms;
            
            private global::System.Data.DataColumn columnsalesAmount;
            
            private global::System.Data.DataColumn columntourName;
            
            private global::System.Data.DataColumn columntourName_cn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleReportDataTable() {
                this.TableName = "TourScheduleReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TourScheduleReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TourScheduleReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourIDColumn {
                get {
                    return this.columntourID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scheduleCountColumn {
                get {
                    return this.columnscheduleCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bookCustomersColumn {
                get {
                    return this.columnbookCustomers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actualCustomersColumn {
                get {
                    return this.columnactualCustomers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actualRoomsColumn {
                get {
                    return this.columnactualRooms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn salesAmountColumn {
                get {
                    return this.columnsalesAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourNameColumn {
                get {
                    return this.columntourName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourName_cnColumn {
                get {
                    return this.columntourName_cn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleReportRow this[int index] {
                get {
                    return ((TourScheduleReportRow)(this.Rows[index]));
                }
            }
            
            public event TourScheduleReportRowChangeEventHandler TourScheduleReportRowChanging;
            
            public event TourScheduleReportRowChangeEventHandler TourScheduleReportRowChanged;
            
            public event TourScheduleReportRowChangeEventHandler TourScheduleReportRowDeleting;
            
            public event TourScheduleReportRowChangeEventHandler TourScheduleReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTourScheduleReportRow(TourScheduleReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleReportRow AddTourScheduleReportRow(int tourID, int scheduleCount, int bookCustomers, int actualCustomers, decimal actualRooms, decimal salesAmount, string tourName, string tourName_cn) {
                TourScheduleReportRow rowTourScheduleReportRow = ((TourScheduleReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tourID,
                        scheduleCount,
                        bookCustomers,
                        actualCustomers,
                        actualRooms,
                        salesAmount,
                        tourName,
                        tourName_cn};
                rowTourScheduleReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTourScheduleReportRow);
                return rowTourScheduleReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TourScheduleReportDataTable cln = ((TourScheduleReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TourScheduleReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntourID = base.Columns["tourID"];
                this.columnscheduleCount = base.Columns["scheduleCount"];
                this.columnbookCustomers = base.Columns["bookCustomers"];
                this.columnactualCustomers = base.Columns["actualCustomers"];
                this.columnactualRooms = base.Columns["actualRooms"];
                this.columnsalesAmount = base.Columns["salesAmount"];
                this.columntourName = base.Columns["tourName"];
                this.columntourName_cn = base.Columns["tourName_cn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntourID = new global::System.Data.DataColumn("tourID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourID);
                this.columnscheduleCount = new global::System.Data.DataColumn("scheduleCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscheduleCount);
                this.columnbookCustomers = new global::System.Data.DataColumn("bookCustomers", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbookCustomers);
                this.columnactualCustomers = new global::System.Data.DataColumn("actualCustomers", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactualCustomers);
                this.columnactualRooms = new global::System.Data.DataColumn("actualRooms", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactualRooms);
                this.columnsalesAmount = new global::System.Data.DataColumn("salesAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsalesAmount);
                this.columntourName = new global::System.Data.DataColumn("tourName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourName);
                this.columntourName_cn = new global::System.Data.DataColumn("tourName_cn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourName_cn);
                this.columntourID.AllowDBNull = false;
                this.columnscheduleCount.ReadOnly = true;
                this.columnbookCustomers.ReadOnly = true;
                this.columnactualCustomers.ReadOnly = true;
                this.columnactualRooms.ReadOnly = true;
                this.columnsalesAmount.ReadOnly = true;
                this.columntourName.MaxLength = 200;
                this.columntourName_cn.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleReportRow NewTourScheduleReportRow() {
                return ((TourScheduleReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TourScheduleReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TourScheduleReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TourScheduleReportRowChanged != null)) {
                    this.TourScheduleReportRowChanged(this, new TourScheduleReportRowChangeEvent(((TourScheduleReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TourScheduleReportRowChanging != null)) {
                    this.TourScheduleReportRowChanging(this, new TourScheduleReportRowChangeEvent(((TourScheduleReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TourScheduleReportRowDeleted != null)) {
                    this.TourScheduleReportRowDeleted(this, new TourScheduleReportRowChangeEvent(((TourScheduleReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TourScheduleReportRowDeleting != null)) {
                    this.TourScheduleReportRowDeleting(this, new TourScheduleReportRowChangeEvent(((TourScheduleReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTourScheduleReportRow(TourScheduleReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS_Schedules ds = new DS_Schedules();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TourScheduleReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FreeSchedulesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnscheduleId;
            
            private global::System.Data.DataColumn columnsubTitle;
            
            private global::System.Data.DataColumn columnbookCustomers;
            
            private global::System.Data.DataColumn columnactualCustomers;
            
            private global::System.Data.DataColumn columnpriceAdult;
            
            private global::System.Data.DataColumn columnpriceChild;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columntourId;
            
            private global::System.Data.DataColumn columnTourName;
            
            private global::System.Data.DataColumn columnTourName_cn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreeSchedulesDataTable() {
                this.TableName = "FreeSchedules";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FreeSchedulesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FreeSchedulesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scheduleIdColumn {
                get {
                    return this.columnscheduleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subTitleColumn {
                get {
                    return this.columnsubTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bookCustomersColumn {
                get {
                    return this.columnbookCustomers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actualCustomersColumn {
                get {
                    return this.columnactualCustomers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceAdultColumn {
                get {
                    return this.columnpriceAdult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceChildColumn {
                get {
                    return this.columnpriceChild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tourIdColumn {
                get {
                    return this.columntourId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TourNameColumn {
                get {
                    return this.columnTourName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TourName_cnColumn {
                get {
                    return this.columnTourName_cn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreeSchedulesRow this[int index] {
                get {
                    return ((FreeSchedulesRow)(this.Rows[index]));
                }
            }
            
            public event FreeSchedulesRowChangeEventHandler FreeSchedulesRowChanging;
            
            public event FreeSchedulesRowChangeEventHandler FreeSchedulesRowChanged;
            
            public event FreeSchedulesRowChangeEventHandler FreeSchedulesRowDeleting;
            
            public event FreeSchedulesRowChangeEventHandler FreeSchedulesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFreeSchedulesRow(FreeSchedulesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreeSchedulesRow AddFreeSchedulesRow(string subTitle, int bookCustomers, int actualCustomers, decimal priceAdult, decimal priceChild, byte status, int tourId, string TourName, string TourName_cn) {
                FreeSchedulesRow rowFreeSchedulesRow = ((FreeSchedulesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        subTitle,
                        bookCustomers,
                        actualCustomers,
                        priceAdult,
                        priceChild,
                        status,
                        tourId,
                        TourName,
                        TourName_cn};
                rowFreeSchedulesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFreeSchedulesRow);
                return rowFreeSchedulesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreeSchedulesRow FindByscheduleId(int scheduleId) {
                return ((FreeSchedulesRow)(this.Rows.Find(new object[] {
                            scheduleId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FreeSchedulesDataTable cln = ((FreeSchedulesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FreeSchedulesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscheduleId = base.Columns["scheduleId"];
                this.columnsubTitle = base.Columns["subTitle"];
                this.columnbookCustomers = base.Columns["bookCustomers"];
                this.columnactualCustomers = base.Columns["actualCustomers"];
                this.columnpriceAdult = base.Columns["priceAdult"];
                this.columnpriceChild = base.Columns["priceChild"];
                this.columnstatus = base.Columns["status"];
                this.columntourId = base.Columns["tourId"];
                this.columnTourName = base.Columns["TourName"];
                this.columnTourName_cn = base.Columns["TourName_cn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscheduleId = new global::System.Data.DataColumn("scheduleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscheduleId);
                this.columnsubTitle = new global::System.Data.DataColumn("subTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubTitle);
                this.columnbookCustomers = new global::System.Data.DataColumn("bookCustomers", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbookCustomers);
                this.columnactualCustomers = new global::System.Data.DataColumn("actualCustomers", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactualCustomers);
                this.columnpriceAdult = new global::System.Data.DataColumn("priceAdult", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceAdult);
                this.columnpriceChild = new global::System.Data.DataColumn("priceChild", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceChild);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columntourId = new global::System.Data.DataColumn("tourId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntourId);
                this.columnTourName = new global::System.Data.DataColumn("TourName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTourName);
                this.columnTourName_cn = new global::System.Data.DataColumn("TourName_cn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTourName_cn);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscheduleId}, true));
                this.columnscheduleId.AutoIncrement = true;
                this.columnscheduleId.AllowDBNull = false;
                this.columnscheduleId.ReadOnly = true;
                this.columnscheduleId.Unique = true;
                this.columnsubTitle.AllowDBNull = false;
                this.columnsubTitle.MaxLength = 200;
                this.columnbookCustomers.AllowDBNull = false;
                this.columnactualCustomers.AllowDBNull = false;
                this.columnpriceAdult.AllowDBNull = false;
                this.columnpriceChild.AllowDBNull = false;
                this.columnstatus.AllowDBNull = false;
                this.columntourId.AllowDBNull = false;
                this.columnTourName.AllowDBNull = false;
                this.columnTourName.MaxLength = 200;
                this.columnTourName_cn.AllowDBNull = false;
                this.columnTourName_cn.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreeSchedulesRow NewFreeSchedulesRow() {
                return ((FreeSchedulesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FreeSchedulesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FreeSchedulesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FreeSchedulesRowChanged != null)) {
                    this.FreeSchedulesRowChanged(this, new FreeSchedulesRowChangeEvent(((FreeSchedulesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FreeSchedulesRowChanging != null)) {
                    this.FreeSchedulesRowChanging(this, new FreeSchedulesRowChangeEvent(((FreeSchedulesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FreeSchedulesRowDeleted != null)) {
                    this.FreeSchedulesRowDeleted(this, new FreeSchedulesRowChangeEvent(((FreeSchedulesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FreeSchedulesRowDeleting != null)) {
                    this.FreeSchedulesRowDeleting(this, new FreeSchedulesRowChangeEvent(((FreeSchedulesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFreeSchedulesRow(FreeSchedulesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS_Schedules ds = new DS_Schedules();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FreeSchedulesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TourScheduleListRow : global::System.Data.DataRow {
            
            private TourScheduleListDataTable tableTourScheduleList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TourScheduleListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTourScheduleList = ((TourScheduleListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scheduleId {
                get {
                    return ((int)(this[this.tableTourScheduleList.scheduleIdColumn]));
                }
                set {
                    this[this.tableTourScheduleList.scheduleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTourScheduleList.startDateColumn]));
                }
                set {
                    this[this.tableTourScheduleList.startDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime endDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTourScheduleList.endDateColumn]));
                }
                set {
                    this[this.tableTourScheduleList.endDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte createMode {
                get {
                    return ((byte)(this[this.tableTourScheduleList.createModeColumn]));
                }
                set {
                    this[this.tableTourScheduleList.createModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int maxSeats {
                get {
                    return ((int)(this[this.tableTourScheduleList.maxSeatsColumn]));
                }
                set {
                    this[this.tableTourScheduleList.maxSeatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bookCustomers {
                get {
                    return ((int)(this[this.tableTourScheduleList.bookCustomersColumn]));
                }
                set {
                    this[this.tableTourScheduleList.bookCustomersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceAdult {
                get {
                    try {
                        return ((decimal)(this[this.tableTourScheduleList.priceAdultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'priceAdult\' in table \'TourScheduleList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleList.priceAdultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceChild {
                get {
                    try {
                        return ((decimal)(this[this.tableTourScheduleList.priceChildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'priceChild\' in table \'TourScheduleList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleList.priceChildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tourGuide {
                get {
                    try {
                        return ((string)(this[this.tableTourScheduleList.tourGuideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tourGuide\' in table \'TourScheduleList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleList.tourGuideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Driver {
                get {
                    try {
                        return ((string)(this[this.tableTourScheduleList.DriverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Driver\' in table \'TourScheduleList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleList.DriverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte status {
                get {
                    return ((byte)(this[this.tableTourScheduleList.statusColumn]));
                }
                set {
                    this[this.tableTourScheduleList.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceAdultNull() {
                return this.IsNull(this.tableTourScheduleList.priceAdultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceAdultNull() {
                this[this.tableTourScheduleList.priceAdultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceChildNull() {
                return this.IsNull(this.tableTourScheduleList.priceChildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceChildNull() {
                this[this.tableTourScheduleList.priceChildColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstourGuideNull() {
                return this.IsNull(this.tableTourScheduleList.tourGuideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettourGuideNull() {
                this[this.tableTourScheduleList.tourGuideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriverNull() {
                return this.IsNull(this.tableTourScheduleList.DriverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriverNull() {
                this[this.tableTourScheduleList.DriverColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScheduleBriefTblRow : global::System.Data.DataRow {
            
            private ScheduleBriefTblDataTable tableScheduleBriefTbl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduleBriefTblRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScheduleBriefTbl = ((ScheduleBriefTblDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scheduleId {
                get {
                    return ((int)(this[this.tableScheduleBriefTbl.scheduleIdColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.scheduleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tourId {
                get {
                    return ((int)(this[this.tableScheduleBriefTbl.tourIdColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.tourIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startDate {
                get {
                    return ((global::System.DateTime)(this[this.tableScheduleBriefTbl.startDateColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.startDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime endDate {
                get {
                    return ((global::System.DateTime)(this[this.tableScheduleBriefTbl.endDateColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.endDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte status {
                get {
                    return ((byte)(this[this.tableScheduleBriefTbl.statusColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte createMode {
                get {
                    return ((byte)(this[this.tableScheduleBriefTbl.createModeColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.createModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bookCustomers {
                get {
                    return ((int)(this[this.tableScheduleBriefTbl.bookCustomersColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.bookCustomersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int actualCustomers {
                get {
                    return ((int)(this[this.tableScheduleBriefTbl.actualCustomersColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.actualCustomersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceAdult {
                get {
                    return ((decimal)(this[this.tableScheduleBriefTbl.priceAdultColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.priceAdultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceChild {
                get {
                    return ((decimal)(this[this.tableScheduleBriefTbl.priceChildColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.priceChildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TourName {
                get {
                    return ((string)(this[this.tableScheduleBriefTbl.TourNameColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.TourNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TourName_cn {
                get {
                    return ((string)(this[this.tableScheduleBriefTbl.TourName_cnColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.TourName_cnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TourType {
                get {
                    return ((byte)(this[this.tableScheduleBriefTbl.TourTypeColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.TourTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte tourStatus {
                get {
                    return ((byte)(this[this.tableScheduleBriefTbl.tourStatusColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.tourStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subTitle {
                get {
                    return ((string)(this[this.tableScheduleBriefTbl.subTitleColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.subTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TourDay {
                get {
                    return ((byte)(this[this.tableScheduleBriefTbl.TourDayColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.TourDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal actualRooms {
                get {
                    return ((decimal)(this[this.tableScheduleBriefTbl.actualRoomsColumn]));
                }
                set {
                    this[this.tableScheduleBriefTbl.actualRoomsColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SchedulesSearchRow : global::System.Data.DataRow {
            
            private SchedulesSearchDataTable tableSchedulesSearch;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchedulesSearchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchedulesSearch = ((SchedulesSearchDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scheduleId {
                get {
                    return ((int)(this[this.tableSchedulesSearch.scheduleIdColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.scheduleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startDate {
                get {
                    return ((global::System.DateTime)(this[this.tableSchedulesSearch.startDateColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.startDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int maxSeats {
                get {
                    return ((int)(this[this.tableSchedulesSearch.maxSeatsColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.maxSeatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bookCustomers {
                get {
                    return ((int)(this[this.tableSchedulesSearch.bookCustomersColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.bookCustomersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tourId {
                get {
                    return ((int)(this[this.tableSchedulesSearch.tourIdColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.tourIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int actualCustomers {
                get {
                    return ((int)(this[this.tableSchedulesSearch.actualCustomersColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.actualCustomersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TourName_cn {
                get {
                    return ((string)(this[this.tableSchedulesSearch.TourName_cnColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.TourName_cnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string driver {
                get {
                    try {
                        return ((string)(this[this.tableSchedulesSearch.driverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'driver\' in table \'SchedulesSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedulesSearch.driverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tourGuide {
                get {
                    try {
                        return ((string)(this[this.tableSchedulesSearch.tourGuideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tourGuide\' in table \'SchedulesSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedulesSearch.tourGuideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TourName {
                get {
                    return ((string)(this[this.tableSchedulesSearch.TourNameColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.TourNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte status {
                get {
                    return ((byte)(this[this.tableSchedulesSearch.statusColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subTitle {
                get {
                    return ((string)(this[this.tableSchedulesSearch.subTitleColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.subTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte tourDay {
                get {
                    return ((byte)(this[this.tableSchedulesSearch.tourDayColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.tourDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceAdult {
                get {
                    return ((decimal)(this[this.tableSchedulesSearch.priceAdultColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.priceAdultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceChild {
                get {
                    return ((decimal)(this[this.tableSchedulesSearch.priceChildColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.priceChildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool hasSeatTable {
                get {
                    return ((bool)(this[this.tableSchedulesSearch.hasSeatTableColumn]));
                }
                set {
                    this[this.tableSchedulesSearch.hasSeatTableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdriverNull() {
                return this.IsNull(this.tableSchedulesSearch.driverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdriverNull() {
                this[this.tableSchedulesSearch.driverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstourGuideNull() {
                return this.IsNull(this.tableSchedulesSearch.tourGuideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettourGuideNull() {
                this[this.tableSchedulesSearch.tourGuideColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScheduleBaseInfoRow : global::System.Data.DataRow {
            
            private ScheduleBaseInfoDataTable tableScheduleBaseInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduleBaseInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScheduleBaseInfo = ((ScheduleBaseInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scheduleId {
                get {
                    return ((int)(this[this.tableScheduleBaseInfo.scheduleIdColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.scheduleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int vehicleId {
                get {
                    return ((int)(this[this.tableScheduleBaseInfo.vehicleIdColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.vehicleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int maxSeats {
                get {
                    return ((int)(this[this.tableScheduleBaseInfo.maxSeatsColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.maxSeatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int driverId {
                get {
                    return ((int)(this[this.tableScheduleBaseInfo.driverIdColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.driverIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int driverAssistanceId {
                get {
                    return ((int)(this[this.tableScheduleBaseInfo.driverAssistanceIdColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.driverAssistanceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tourGuideId {
                get {
                    return ((int)(this[this.tableScheduleBaseInfo.tourGuideIdColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.tourGuideIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tourGuideAssistanceId {
                get {
                    return ((int)(this[this.tableScheduleBaseInfo.tourGuideAssistanceIdColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.tourGuideAssistanceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vehicleName {
                get {
                    try {
                        return ((string)(this[this.tableScheduleBaseInfo.vehicleNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'vehicleName\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.vehicleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int customerSeatNum {
                get {
                    try {
                        return ((int)(this[this.tableScheduleBaseInfo.customerSeatNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'customerSeatNum\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.customerSeatNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string driverName {
                get {
                    try {
                        return ((string)(this[this.tableScheduleBaseInfo.driverNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'driverName\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.driverNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string driverAssName {
                get {
                    try {
                        return ((string)(this[this.tableScheduleBaseInfo.driverAssNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'driverAssName\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.driverAssNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tourGuideName {
                get {
                    try {
                        return ((string)(this[this.tableScheduleBaseInfo.tourGuideNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tourGuideName\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.tourGuideNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tourGuideAssName {
                get {
                    try {
                        return ((string)(this[this.tableScheduleBaseInfo.tourGuideAssNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tourGuideAssName\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.tourGuideAssNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte status {
                get {
                    return ((byte)(this[this.tableScheduleBaseInfo.statusColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subTitle {
                get {
                    return ((string)(this[this.tableScheduleBaseInfo.subTitleColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.subTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startDate {
                get {
                    return ((global::System.DateTime)(this[this.tableScheduleBaseInfo.startDateColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.startDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime endDate {
                get {
                    return ((global::System.DateTime)(this[this.tableScheduleBaseInfo.endDateColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.endDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tourId {
                get {
                    return ((int)(this[this.tableScheduleBaseInfo.tourIdColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.tourIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte tourDay {
                get {
                    try {
                        return ((byte)(this[this.tableScheduleBaseInfo.tourDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tourDay\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.tourDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int maxWebSeats {
                get {
                    return ((int)(this[this.tableScheduleBaseInfo.maxWebSeatsColumn]));
                }
                set {
                    this[this.tableScheduleBaseInfo.maxWebSeatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceAdult {
                get {
                    try {
                        return ((decimal)(this[this.tableScheduleBaseInfo.priceAdultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'priceAdult\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.priceAdultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceChild {
                get {
                    try {
                        return ((decimal)(this[this.tableScheduleBaseInfo.priceChildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'priceChild\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.priceChildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool hasSeatTable {
                get {
                    try {
                        return ((bool)(this[this.tableScheduleBaseInfo.hasSeatTableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hasSeatTable\' in table \'ScheduleBaseInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduleBaseInfo.hasSeatTableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvehicleNameNull() {
                return this.IsNull(this.tableScheduleBaseInfo.vehicleNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvehicleNameNull() {
                this[this.tableScheduleBaseInfo.vehicleNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscustomerSeatNumNull() {
                return this.IsNull(this.tableScheduleBaseInfo.customerSeatNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcustomerSeatNumNull() {
                this[this.tableScheduleBaseInfo.customerSeatNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdriverNameNull() {
                return this.IsNull(this.tableScheduleBaseInfo.driverNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdriverNameNull() {
                this[this.tableScheduleBaseInfo.driverNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdriverAssNameNull() {
                return this.IsNull(this.tableScheduleBaseInfo.driverAssNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdriverAssNameNull() {
                this[this.tableScheduleBaseInfo.driverAssNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstourGuideNameNull() {
                return this.IsNull(this.tableScheduleBaseInfo.tourGuideNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettourGuideNameNull() {
                this[this.tableScheduleBaseInfo.tourGuideNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstourGuideAssNameNull() {
                return this.IsNull(this.tableScheduleBaseInfo.tourGuideAssNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettourGuideAssNameNull() {
                this[this.tableScheduleBaseInfo.tourGuideAssNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstourDayNull() {
                return this.IsNull(this.tableScheduleBaseInfo.tourDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettourDayNull() {
                this[this.tableScheduleBaseInfo.tourDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceAdultNull() {
                return this.IsNull(this.tableScheduleBaseInfo.priceAdultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceAdultNull() {
                this[this.tableScheduleBaseInfo.priceAdultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceChildNull() {
                return this.IsNull(this.tableScheduleBaseInfo.priceChildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceChildNull() {
                this[this.tableScheduleBaseInfo.priceChildColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshasSeatTableNull() {
                return this.IsNull(this.tableScheduleBaseInfo.hasSeatTableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethasSeatTableNull() {
                this[this.tableScheduleBaseInfo.hasSeatTableColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TourScheduleReportRow : global::System.Data.DataRow {
            
            private TourScheduleReportDataTable tableTourScheduleReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TourScheduleReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTourScheduleReport = ((TourScheduleReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tourID {
                get {
                    return ((int)(this[this.tableTourScheduleReport.tourIDColumn]));
                }
                set {
                    this[this.tableTourScheduleReport.tourIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scheduleCount {
                get {
                    try {
                        return ((int)(this[this.tableTourScheduleReport.scheduleCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scheduleCount\' in table \'TourScheduleReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleReport.scheduleCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bookCustomers {
                get {
                    try {
                        return ((int)(this[this.tableTourScheduleReport.bookCustomersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bookCustomers\' in table \'TourScheduleReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleReport.bookCustomersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int actualCustomers {
                get {
                    try {
                        return ((int)(this[this.tableTourScheduleReport.actualCustomersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'actualCustomers\' in table \'TourScheduleReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleReport.actualCustomersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal actualRooms {
                get {
                    try {
                        return ((decimal)(this[this.tableTourScheduleReport.actualRoomsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'actualRooms\' in table \'TourScheduleReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleReport.actualRoomsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal salesAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableTourScheduleReport.salesAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'salesAmount\' in table \'TourScheduleReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleReport.salesAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tourName {
                get {
                    try {
                        return ((string)(this[this.tableTourScheduleReport.tourNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tourName\' in table \'TourScheduleReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleReport.tourNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tourName_cn {
                get {
                    try {
                        return ((string)(this[this.tableTourScheduleReport.tourName_cnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tourName_cn\' in table \'TourScheduleReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTourScheduleReport.tourName_cnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscheduleCountNull() {
                return this.IsNull(this.tableTourScheduleReport.scheduleCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscheduleCountNull() {
                this[this.tableTourScheduleReport.scheduleCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbookCustomersNull() {
                return this.IsNull(this.tableTourScheduleReport.bookCustomersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbookCustomersNull() {
                this[this.tableTourScheduleReport.bookCustomersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactualCustomersNull() {
                return this.IsNull(this.tableTourScheduleReport.actualCustomersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactualCustomersNull() {
                this[this.tableTourScheduleReport.actualCustomersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactualRoomsNull() {
                return this.IsNull(this.tableTourScheduleReport.actualRoomsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactualRoomsNull() {
                this[this.tableTourScheduleReport.actualRoomsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssalesAmountNull() {
                return this.IsNull(this.tableTourScheduleReport.salesAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsalesAmountNull() {
                this[this.tableTourScheduleReport.salesAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstourNameNull() {
                return this.IsNull(this.tableTourScheduleReport.tourNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettourNameNull() {
                this[this.tableTourScheduleReport.tourNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstourName_cnNull() {
                return this.IsNull(this.tableTourScheduleReport.tourName_cnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettourName_cnNull() {
                this[this.tableTourScheduleReport.tourName_cnColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FreeSchedulesRow : global::System.Data.DataRow {
            
            private FreeSchedulesDataTable tableFreeSchedules;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FreeSchedulesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFreeSchedules = ((FreeSchedulesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scheduleId {
                get {
                    return ((int)(this[this.tableFreeSchedules.scheduleIdColumn]));
                }
                set {
                    this[this.tableFreeSchedules.scheduleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subTitle {
                get {
                    return ((string)(this[this.tableFreeSchedules.subTitleColumn]));
                }
                set {
                    this[this.tableFreeSchedules.subTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bookCustomers {
                get {
                    return ((int)(this[this.tableFreeSchedules.bookCustomersColumn]));
                }
                set {
                    this[this.tableFreeSchedules.bookCustomersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int actualCustomers {
                get {
                    return ((int)(this[this.tableFreeSchedules.actualCustomersColumn]));
                }
                set {
                    this[this.tableFreeSchedules.actualCustomersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceAdult {
                get {
                    return ((decimal)(this[this.tableFreeSchedules.priceAdultColumn]));
                }
                set {
                    this[this.tableFreeSchedules.priceAdultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceChild {
                get {
                    return ((decimal)(this[this.tableFreeSchedules.priceChildColumn]));
                }
                set {
                    this[this.tableFreeSchedules.priceChildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte status {
                get {
                    return ((byte)(this[this.tableFreeSchedules.statusColumn]));
                }
                set {
                    this[this.tableFreeSchedules.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tourId {
                get {
                    return ((int)(this[this.tableFreeSchedules.tourIdColumn]));
                }
                set {
                    this[this.tableFreeSchedules.tourIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TourName {
                get {
                    return ((string)(this[this.tableFreeSchedules.TourNameColumn]));
                }
                set {
                    this[this.tableFreeSchedules.TourNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TourName_cn {
                get {
                    return ((string)(this[this.tableFreeSchedules.TourName_cnColumn]));
                }
                set {
                    this[this.tableFreeSchedules.TourName_cnColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TourScheduleListRowChangeEvent : global::System.EventArgs {
            
            private TourScheduleListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleListRowChangeEvent(TourScheduleListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScheduleBriefTblRowChangeEvent : global::System.EventArgs {
            
            private ScheduleBriefTblRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBriefTblRowChangeEvent(ScheduleBriefTblRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBriefTblRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SchedulesSearchRowChangeEvent : global::System.EventArgs {
            
            private SchedulesSearchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchedulesSearchRowChangeEvent(SchedulesSearchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchedulesSearchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScheduleBaseInfoRowChangeEvent : global::System.EventArgs {
            
            private ScheduleBaseInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBaseInfoRowChangeEvent(ScheduleBaseInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleBaseInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TourScheduleReportRowChangeEvent : global::System.EventArgs {
            
            private TourScheduleReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleReportRowChangeEvent(TourScheduleReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TourScheduleReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FreeSchedulesRowChangeEvent : global::System.EventArgs {
            
            private FreeSchedulesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreeSchedulesRowChangeEvent(FreeSchedulesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreeSchedulesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace com.Omei.DLL.DS_SchedulesTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TourScheduleListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TourScheduleListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TourScheduleList";
            tableMapping.ColumnMappings.Add("scheduleId", "scheduleId");
            tableMapping.ColumnMappings.Add("startDate", "startDate");
            tableMapping.ColumnMappings.Add("endDate", "endDate");
            tableMapping.ColumnMappings.Add("createMode", "createMode");
            tableMapping.ColumnMappings.Add("maxSeats", "maxSeats");
            tableMapping.ColumnMappings.Add("bookCustomers", "bookCustomers");
            tableMapping.ColumnMappings.Add("priceAdult", "priceAdult");
            tableMapping.ColumnMappings.Add("priceChild", "priceChild");
            tableMapping.ColumnMappings.Add("tourGuide", "tourGuide");
            tableMapping.ColumnMappings.Add("Driver", "Driver");
            tableMapping.ColumnMappings.Add("status", "status");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::com.Omei.DLL.Properties.Settings.Default.OmeiTravelConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT s.scheduleId, s.startDate, s.endDate, s.createMode, s.status, s.maxSeats, 
      s.bookCustomers, t.priceAdult, t.priceChild, 
      u.firstName + '.' + u.middleName AS tourGuide, 
      u1.firstName + '.' + u1.middleName AS Driver
FROM BusSchedule AS s INNER JOIN
      userInfo AS u ON s.tourGuideId = u.userId INNER JOIN
      userInfo AS u1 ON s.driverId = u1.userId
left join tours as t on s.tourID=t.tourID
WHERE (s.tourId = @tourId) AND (s.startDate >= @startDate)
ORDER BY s.startDate";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tourId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "tourId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "startDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS_Schedules.TourScheduleListDataTable GetTourScheduleList(int tourId, System.DateTime startDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(tourId));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(startDate));
            DS_Schedules.TourScheduleListDataTable dataTable = new DS_Schedules.TourScheduleListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ScheduleBriefTblTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScheduleBriefTblTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ScheduleBriefTbl";
            tableMapping.ColumnMappings.Add("scheduleId", "scheduleId");
            tableMapping.ColumnMappings.Add("tourId", "tourId");
            tableMapping.ColumnMappings.Add("startDate", "startDate");
            tableMapping.ColumnMappings.Add("endDate", "endDate");
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("createMode", "createMode");
            tableMapping.ColumnMappings.Add("bookCustomers", "bookCustomers");
            tableMapping.ColumnMappings.Add("actualCustomers", "actualCustomers");
            tableMapping.ColumnMappings.Add("priceAdult", "priceAdult");
            tableMapping.ColumnMappings.Add("priceChild", "priceChild");
            tableMapping.ColumnMappings.Add("TourName", "TourName");
            tableMapping.ColumnMappings.Add("TourName_cn", "TourName_cn");
            tableMapping.ColumnMappings.Add("TourType", "TourType");
            tableMapping.ColumnMappings.Add("tourStatus", "tourStatus");
            tableMapping.ColumnMappings.Add("subTitle", "subTitle");
            tableMapping.ColumnMappings.Add("TourDay", "TourDay");
            tableMapping.ColumnMappings.Add("actualRooms", "actualRooms");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::com.Omei.DLL.Properties.Settings.Default.OmeiTravelConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT s.scheduleId, s.tourId, s.startDate, s.endDate, s.status, s.createMode, 
      s.bookCustomers, s.actualCustomers, s.actualRooms, t.priceAdult, 
      t.priceChild, t.TourName, t.TourName_cn, t.TourType, 
      t.status AS tourStatus, s.subTitle, t.TourDay
FROM BusSchedule AS s INNER JOIN
      tours AS t ON s.tourId = t.TourID
WHERE (s.scheduleId = @scheduleId)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scheduleId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "scheduleId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS_Schedules.ScheduleBriefTblDataTable GetData(int scheduleId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(scheduleId));
            DS_Schedules.ScheduleBriefTblDataTable dataTable = new DS_Schedules.ScheduleBriefTblDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SchedulesSearchTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SchedulesSearchTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SchedulesSearch";
            tableMapping.ColumnMappings.Add("scheduleId", "scheduleId");
            tableMapping.ColumnMappings.Add("startDate", "startDate");
            tableMapping.ColumnMappings.Add("maxSeats", "maxSeats");
            tableMapping.ColumnMappings.Add("bookCustomers", "bookCustomers");
            tableMapping.ColumnMappings.Add("tourId", "tourId");
            tableMapping.ColumnMappings.Add("actualCustomers", "actualCustomers");
            tableMapping.ColumnMappings.Add("TourName_cn", "TourName_cn");
            tableMapping.ColumnMappings.Add("driver", "driver");
            tableMapping.ColumnMappings.Add("tourGuide", "tourGuide");
            tableMapping.ColumnMappings.Add("TourName", "TourName");
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("subTitle", "subTitle");
            tableMapping.ColumnMappings.Add("tourDay", "tourDay");
            tableMapping.ColumnMappings.Add("priceAdult", "priceAdult");
            tableMapping.ColumnMappings.Add("priceChild", "priceChild");
            tableMapping.ColumnMappings.Add("hasSeatTable", "hasSeatTable");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::com.Omei.DLL.Properties.Settings.Default.OmeiTravelConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT BusSchedule.scheduleId, BusSchedule.subTitle, tours.tourDay, BusSchedule.startDate, BusSchedule.maxSeats, tours.hasSeatTable, 
      BusSchedule.bookCustomers, BusSchedule.tourId, BusSchedule.actualCustomers, 
      tours.TourName, tours.TourName_cn, drvu.firstName + '.' + drvu.lastName AS driver, 
      tgu.nickname AS tourGuide, BusSchedule.status,
tours.priceAdult, tours.priceChild
FROM BusSchedule 
INNER JOIN
      tours ON BusSchedule.tourId = tours.TourID 
LEFT OUTER JOIN
      userInfo AS drvu ON BusSchedule.driverId = drvu.userId 
LEFT OUTER JOIN
      employeeInfo AS tgu ON BusSchedule.tourGuideId = tgu.employeeID
WHERE (BusSchedule.startDate >= @startDate) AND (BusSchedule.endDate <= @endDate) 
      AND (@tourType=0 or tours.tourType=@tourType) AND (@tourID=0 or BusSchedule.tourID=@tourID) and (@showAll=1 or BusSchedule.status<>7)
ORDER BY BusSchedule.startDate";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "startDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@endDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "endDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tourType", global::System.Data.SqlDbType.TinyInt, 1, global::System.Data.ParameterDirection.Input, 0, 0, "TourType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tourID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "tourId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@showAll", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS_Schedules.SchedulesSearchDataTable GetData(System.DateTime startDate, System.DateTime endDate, int tourType, int tourID, string showAll) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(startDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(endDate));
            this.Adapter.SelectCommand.Parameters[2].Value = ((int)(tourType));
            this.Adapter.SelectCommand.Parameters[3].Value = ((int)(tourID));
            if ((showAll == null)) {
                throw new global::System.ArgumentNullException("showAll");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(showAll));
            }
            DS_Schedules.SchedulesSearchDataTable dataTable = new DS_Schedules.SchedulesSearchDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ScheduleBaseInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScheduleBaseInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ScheduleBaseInfo";
            tableMapping.ColumnMappings.Add("scheduleId", "scheduleId");
            tableMapping.ColumnMappings.Add("vehicleId", "vehicleId");
            tableMapping.ColumnMappings.Add("maxSeats", "maxSeats");
            tableMapping.ColumnMappings.Add("driverId", "driverId");
            tableMapping.ColumnMappings.Add("driverAssistanceId", "driverAssistanceId");
            tableMapping.ColumnMappings.Add("tourGuideId", "tourGuideId");
            tableMapping.ColumnMappings.Add("tourGuideAssistanceId", "tourGuideAssistanceId");
            tableMapping.ColumnMappings.Add("vehicleName", "vehicleName");
            tableMapping.ColumnMappings.Add("customerSeatNum", "customerSeatNum");
            tableMapping.ColumnMappings.Add("driverName", "driverName");
            tableMapping.ColumnMappings.Add("driverAssName", "driverAssName");
            tableMapping.ColumnMappings.Add("tourGuideName", "tourGuideName");
            tableMapping.ColumnMappings.Add("tourGuideAssName", "tourGuideAssName");
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("subTitle", "subTitle");
            tableMapping.ColumnMappings.Add("startDate", "startDate");
            tableMapping.ColumnMappings.Add("endDate", "endDate");
            tableMapping.ColumnMappings.Add("tourId", "tourId");
            tableMapping.ColumnMappings.Add("tourDay", "tourDay");
            tableMapping.ColumnMappings.Add("maxWebSeats", "maxWebSeats");
            tableMapping.ColumnMappings.Add("priceAdult", "priceAdult");
            tableMapping.ColumnMappings.Add("priceChild", "priceChild");
            tableMapping.ColumnMappings.Add("hasSeatTable", "hasSeatTable");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::com.Omei.DLL.Properties.Settings.Default.OmeiTravelConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT s.scheduleId, s.maxSeats, v.vehicleName, v.customerSeatNum, s.tourId, 
      t.priceAdult, t.priceChild, t.hasSeatTable,
      u1.firstName + '.' + u1.lastName AS driverName, 
      u2.firstName + '.' + u2.lastName AS driverAssName, 
      u3.nickname AS tourGuideName, 
      u4.nickname AS tourGuideAssName, s.vehicleId, s.driverId, s.maxWebSeats,
      s.driverAssistanceId, s.tourGuideId, s.tourGuideAssistanceId, t.tourDay, s.status, s.subTitle, s.startDate, s.endDate
FROM BusSchedule AS s LEFT OUTER JOIN
      vehicles AS v ON s.vehicleId = v.vehicleId LEFT OUTER JOIN
      userInfo AS u1 ON s.driverId = u1.userId LEFT OUTER JOIN
      userInfo AS u2 ON s.driverAssistanceId = u2.userId LEFT OUTER JOIN
      employeeInfo AS u3 ON s.tourGuideId = u3.employeeID LEFT OUTER JOIN
      employeeInfo AS u4 ON s.tourGuideAssistanceId = u4.employeeID left outer join 
      tours as t on s.tourId=t.tourId
WHERE (s.scheduleId = @scheduleId)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scheduleId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "scheduleId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS_Schedules.ScheduleBaseInfoDataTable GetData(int scheduleId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(scheduleId));
            DS_Schedules.ScheduleBaseInfoDataTable dataTable = new DS_Schedules.ScheduleBaseInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TourScheduleReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TourScheduleReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TourScheduleReport";
            tableMapping.ColumnMappings.Add("tourID", "tourID");
            tableMapping.ColumnMappings.Add("scheduleCount", "scheduleCount");
            tableMapping.ColumnMappings.Add("bookCustomers", "bookCustomers");
            tableMapping.ColumnMappings.Add("actualCustomers", "actualCustomers");
            tableMapping.ColumnMappings.Add("actualRooms", "actualRooms");
            tableMapping.ColumnMappings.Add("salesAmount", "salesAmount");
            tableMapping.ColumnMappings.Add("tourName", "tourName");
            tableMapping.ColumnMappings.Add("tourName_cn", "tourName_cn");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::com.Omei.DLL.Properties.Settings.Default.OmeiTravelConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select s.*, t.tourName, t.tourName_cn from (
select tourID,
	count(*) as scheduleCount, 
	sum(bookCustomers) as bookCustomers,
	sum(actualCustomers) as actualCustomers,
	sum(actualRooms) as actualRooms, 
	sum(salesAmount) as salesAmount
from busSchedule
where startDate between @fromDate and @toDate
group by tourID
) as s
left join tours as t on s.tourID=t.tourID
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@toDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fromDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS_Schedules.TourScheduleReportDataTable TourScheduleReport(System.DateTime toDate, System.DateTime fromDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(toDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(fromDate));
            DS_Schedules.TourScheduleReportDataTable dataTable = new DS_Schedules.TourScheduleReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FreeSchedulesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FreeSchedulesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FreeSchedules";
            tableMapping.ColumnMappings.Add("scheduleId", "scheduleId");
            tableMapping.ColumnMappings.Add("subTitle", "subTitle");
            tableMapping.ColumnMappings.Add("bookCustomers", "bookCustomers");
            tableMapping.ColumnMappings.Add("actualCustomers", "actualCustomers");
            tableMapping.ColumnMappings.Add("priceAdult", "priceAdult");
            tableMapping.ColumnMappings.Add("priceChild", "priceChild");
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("tourId", "tourId");
            tableMapping.ColumnMappings.Add("TourName", "TourName");
            tableMapping.ColumnMappings.Add("TourName_cn", "TourName_cn");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::com.Omei.DLL.Properties.Settings.Default.OmeiTravelConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT s.scheduleId, s.tourId, s.subTitle, s.bookCustomers, s.actualCustomers, 
      t.priceAdult, t.priceChild, s.status, t.TourName, t.TourName_cn
FROM BusSchedule AS s INNER JOIN
      tours AS t ON s.tourId = t.TourID
WHERE (s.tourId = @tourId) AND (s.status > 0)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tourId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "tourId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS_Schedules.FreeSchedulesDataTable GetData(int tourId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(tourId));
            DS_Schedules.FreeSchedulesDataTable dataTable = new DS_Schedules.FreeSchedulesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591